% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/annotate.R
\name{manc_annotate_body}
\alias{manc_annotate_body}
\title{Set Clio body annotations}
\usage{
manc_annotate_body(
  x,
  test = TRUE,
  version = NULL,
  write_empty_fields = FALSE,
  protect = c("user"),
  chunksize = 50,
  ...
)
}
\arguments{
\item{x}{A data.frame, list or JSON string containing body annotations.
\bold{End users are strongly recommended to use data.frames.}}

\item{test}{Whether to use the test clio store (recommended until you are
sure you know what you are doing).}

\item{version}{Optional clio version to associate with this annotation. The
default \code{NULL} uses the current version returned by the API.}

\item{write_empty_fields}{When \code{x} is a data.frame, this controls
whether empty fields in \code{x} overwrite fields in the clio-store
database (when they are not protected by the \code{protect} argument). The
(conservative) default \code{write_empty_fields=FALSE} does not overwrite.
If you do want to set fields to an empty value (usually the empty string)
then you must set \code{write_empty_fields=TRUE}.}

\item{protect}{Vector of fields that will not be overwritten if they already
have a value in clio store. Set to \code{TRUE} to protect all fields and to
\code{FALSE} to overwrite all fields for which you provide data. See
details for the rational behind the default value of "user"}

\item{chunksize}{When you have many bodies to annotate the request will by
default be sent 50 records at a time to avoid any issue with timeouts. You
can increase for a small speed up if you find your setup is fast enough.
Set to \code{Inf} to insist that all records are sent in a single request.
\bold{NB only applies when \code{x} is a data.frame}.}

\item{...}{Additional parameters passed to \code{pbapply::\link{pbsapply}}}
}
\value{
\code{NULL} invisibly on success. Errors out on failure.
}
\description{
Set Clio body annotations
}
\details{
Clio body annotations are stored in a
  \href{https://cloud.google.com/firestore}{Google Firestore} database.
  Further details are provided in
  \href{https://docs.google.com/document/d/14wzFX6cMf0JcR0ozf7wmufNoUcVtlruzUo5BdAgdM-g/edit}{basic
   docs from Bill Katz}. Each body has an associated JSON list containing a
  set of standard user visible fields. Some of these are constrained. See
  \href{https://docs.google.com/spreadsheets/d/1v8AltqyPCVNIC_m6gDNy6IDK10R6xcGkKWFxhmvCpCs/edit?usp=sharing}{Clio
   fields Google sheet} for details.

  It can take some time to apply annotations, so requests are chunked by
  default in groups of 50.

  A single column called \code{position} or 3 columns names x, y, z or X, Y,
  Z in any form accepted by \code{\link{xyzmatrix}} will be converted to a
  position stored with each record. This is recommended when creating
  records.

  When \code{protect=TRUE} no data in Clio will be overwritten - only new
  data will be added. When \code{protect=FALSE} all fields will overwritten
  by new data for each non-empty value in \code{x}. If
  \code{write_empty_fields=TRUE} then even empty fields in \code{x} will
  overwrite fields in the database. Note that these conditions apply per
  record i.e. per neuron not per column of data.
}
\section{Validation}{
 Validation depends on how you provide your input data.
  If \code{x} is a data.frame then each row is checked for some basics
  including the presence of a bodyid, and empty fields are removed. In future
  we will also check fields which are only allowed to take certain values.

  When \code{x} is a character vector, it is checked to see that it is valid
  JSON and that there is a bodyid field for each record. This intended
  principally for developer use or to confirm that a specific JSON payload
  has been applied. You probably should not be using it regularly or for bulk
  upload.

  When \code{x} is a list, no further validation occurs.

  For these reasons, \bold{it is strongly recommended that end users provide
  \code{data.frame} input}.
}

\section{Users}{
 You should record users with the email address that they use
  to authenticate to Clio. At present you are responsible for choosing how to
  set the two user fields: \itemize{

  \item \code{user} This is intended to be the user that first created the
  annotation record for a body. At some point they may have some control over
  edits.

  \item \code{last_modified_by} This is intended to be the user who provided
  the last change to a record; in the case of bulk uploads, this should be
  the user providing (or at least guaranteeing) the biological insight if at
  all possible.

  }
}

\examples{

\dontrun{
# note use of test server
manc_annotate_body(data.frame(bodyid=10002, class='Descending Neuron',
  description='Giant Fiber'), test=TRUE)

# if you give a list then you are responsible for validation
manc_annotate_body(list(bodyid=10002, class='Descending Neuron',
  description='Giant Fiber'), test=TRUE)

# don't overwrite any fields in database
manc_annotate_body(list(bodyid=10002, class='Descending Neuron',
  description='Giant Fiber'), test=TRUE, protect=TRUE)

# overwrite all fields in database except with empty values
manc_annotate_body(list(bodyid=10002, class='Descending Neuron',
  description='Giant Fiber'), test=TRUE, protect=FALSE)

#' # overwrite all fields in database even if supplied data has empty values
manc_annotate_body(list(bodyid=10002, class='',
  description='Giant Fiber'), test=TRUE, protect=FALSE, write_empty_fields = TRUE)
}
}
\seealso{
Other manc-annotation: 
\code{\link{manc_body_annotations}()},
\code{\link{manc_meta}()},
\code{\link{manc_point_annotations}()}
}
\concept{manc-annotation}
